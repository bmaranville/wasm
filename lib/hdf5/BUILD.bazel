load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("//toolchains/cmake:cmake.bzl", "cmake_lib")

package(default_visibility = ["//:__subpackages__"])

C_FLAGS = " ".join(["-Wno-{}".format(check) for check in [
    # keep sorted
    "incompatible-pointer-types-discards-qualifiers",
    "misleading-indentation",
    "missing-braces",
    "self-assign",
    "sometimes-uninitialized",
    "unknown-warning-option",
    "unused-but-set-variable",
    "unused-function",
    "unused-variable",
]])

CACHE_ENTRIES = {
    "BUILD_SHARED_LIBS": False,
    "BUILD_STATIC_LIBS": True,
    "BUILD_TESTING": False,
    "CMAKE_C_FLAGS": C_FLAGS,
    "HDF5_BUILD_EXAMPLES": False,
    "HDF5_BUILD_TOOLS": False,
    "HDF5_ENABLE_Z_LIB_SUPPORT": True,
    "ZLIB_INCLUDE_DIR": "${EXT_BUILD_DEPS}/z_lib/include",
    "ZLIB_LIBRARY": "${EXT_BUILD_DEPS}/z_lib/lib/libz.a",
}

CACHE_ENTRIES_WASM = dict(CACHE_ENTRIES.items() + {
    # Emscripten doesn't implement getpwuid yet:
    # https://github.com/emscripten-core/emscripten/issues/13219
    "H5_HAVE_GETPWUID": False,
    # Emscripten doesn't support POSIX signals (except kill):
    # https://emscripten.org/docs/porting/pthreads.html#special-considerations
    "H5_HAVE_SIGNAL": False,
}.items())

cmake_lib(
    name = "hdf5",
    cache_entries = {
        "//config:wasm": CACHE_ENTRIES_WASM,
        "//conditions:default": CACHE_ENTRIES,
    },
    deps = [
        "//lib/z",
    ],
)

bzl_library(
    name = "package",
    srcs = ["package.bzl"],
    deps = ["//:http_archive"],
)
